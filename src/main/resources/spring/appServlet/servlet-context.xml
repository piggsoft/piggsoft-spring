<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!-- DispatcherServlet Context: defines this servlet's request-processing
        infrastructure -->

    <!-- Enables the Spring MVC @controller programming model -->
    <annotation-driven/>

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving
        up static resources in the ${webappRoot}/resources directory -->
    <resources mapping="/resources/**" location="/resources/"/>

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources
        in the /WEB-INF/views directory -->
    <beans:bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/view/"/>
        <beans:property name="suffix" value=".jsp"/>
    </beans:bean>

    <!--因为spring的context是父子容器，
    所以会产生冲突，Controller会进步前辈行扫描装配，
    而此时的Service还没有进行事务的加强处理惩罚，
    获得的将是原样的Service（没有经过事务加强处理惩罚，故而没有事务处理惩罚才能） ，
    最后才是applicationContext.xml中的扫描设备进行事务处理惩罚-->
    <context:component-scan base-package="com.piggsoft.mvc"/>

    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="defaultEncoding" value="UTF-8"/>
    </beans:bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 定义ApplicationListener分发时的taskExecutor -->
    <beans:bean id="taskExecutor"
                class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    </beans:bean>
    <!-- 重新定义ApplicationListener分发时的taskExecutor，默认是同步执行 -->
    <beans:bean id="applicationEventMulticaster"
                class="org.springframework.context.event.SimpleApplicationEventMulticaster">
        <beans:property name="taskExecutor" ref="taskExecutor"/>
    </beans:bean>

</beans:beans>
